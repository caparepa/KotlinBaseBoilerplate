apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: "kotlin-kapt"

apply plugin: 'com.google.gms.google-services'

apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.example.kotlinbaseboilerplate"
        minSdkVersion 21
        targetSdkVersion 28
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //Added default Room DB export location to get rid of warning
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }

    dexOptions {
        preDexLibraries true
        javaMaxHeapSize "2g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    /**
     * In order to use the signingOptions, the corresponding keystore files must be generated
     */
    signingConfigs {
        debug {
            storeFile file('../keystore-debug.jks')
            storePassword '123456'
            keyAlias 'keystore-debug'
            keyPassword '123456'
        }
        release {
            storeFile file('../keystore-release.jks')
            storePassword '123456'
            keyAlias 'keystore-release'
            keyPassword '123456'
        }
    }

    lintOptions {
        abortOnError true
    }

    FileCollection proguardFileCollection = files(
            file('../proguard.cfg'),
            getDefaultProguardFile('proguard-android.txt')
    )


    buildTypes {

        debug {
            versionNameSuffix "-${getCurrentGitBranchName()}"

            applicationIdSuffix '.debug'
            minifyEnabled false
            zipAlignEnabled false // this is default for debug
            signingConfig signingConfigs.debug

            buildConfigField "String", "WEATHERBIT_BASE_URL", "\"http://api.weatherbit.io/v2.0/\""
            buildConfigField "String", "WEATHERBIT_API_KEY", WEATHERBIT_API_KEY
            buildConfigField "String", "GIT_SHA", "\"${getGitSHA()}\""

            resValue "string", "application_id", android.defaultConfig.applicationId + applicationIdSuffix
            resValue "string", "google_maps_key", "HERE GOES YOUR GOOGLE MAPS KEY"
        }

        debugMinified.initWith(buildTypes.debug)
        debugMinified {
            minifyEnabled true
            proguardFiles proguardFileCollection.getFiles().toArray()
        }

        debugStaging {
            initWith debug
            applicationIdSuffix '.debugstaging'

            minifyEnabled true
            proguardFiles proguardFileCollection.getFiles().toArray()

            buildConfigField "String", "WEATHERBIT_BASE_URL", "\"http://api.weatherbit.io/v2.0/\""
            buildConfigField "String", "WEATHERBIT_API_KEY", WEATHERBIT_API_KEY
            buildConfigField "String", "GIT_SHA", "\"${getGitSHA()}\""

            resValue "string", "application_id", android.defaultConfig.applicationId + applicationIdSuffix
            resValue "string", "google_maps_key", "HERE GOES YOUR GOOGLE MAPS KEY"
        }

        release {
            minifyEnabled true
            proguardFiles proguardFileCollection.getFiles().toArray()
            signingConfig signingConfigs.release
            zipAlignEnabled true // this is default for release

            buildConfigField "String", "WEATHERBIT_BASE_URL", "\"http://api.weatherbit.io/v2.0/\""
            buildConfigField "String", "WEATHERBIT_API_KEY", WEATHERBIT_API_KEY
            buildConfigField "String", "GIT_SHA", "\"${getGitSHA()}\""

            resValue "string", "application_id", android.defaultConfig.applicationId + applicationIdSuffix
            resValue "string", "google_maps_key", "HERE GOES YOUR GOOGLE MAPS KEY"
        }
    }
}

/**
 * Experimental
 */
androidExtensions {
    experimental = true
}

/**
 * Code dependencies
 */
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //Core
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    //Firebase analytics
    implementation 'com.google.firebase:firebase-analytics:17.2.0'

    // Navigation
    implementation "android.arch.navigation:navigation-fragment:$navigation_version"
    implementation "android.arch.navigation:navigation-ui:$navigation_version"
    implementation "android.arch.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "android.arch.navigation:navigation-ui-ktx:$navigation_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0'
    kapt "androidx.room:room-compiler:$room_version"

    // Kotlin Android Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.1"

    // Preference
    implementation "androidx.preference:preference:1.1.0"

    // WeatherLocation
    implementation "com.google.android.gms:play-services-location:17.0.0"

    // New Material Design
    implementation "com.google.android.material:material:1.0.0"
}

/**
 * Test dependencies
 */
dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

/**
 * Third-party dependencies
 */
dependencies {
    // Gson
    implementation 'com.google.code.gson:gson:2.8.6'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'

    //moshi
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    // Kodein (dependency injection)
    implementation "org.kodein.di:kodein-di-generic-jvm:$kodein_version"
    implementation "org.kodein.di:kodein-di-framework-android-x:$kodein_version"

    // Better dateTime-time support even on older Android versions
    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.10.0'
    kapt 'com.github.bumptech.glide:compiler:4.10.0'

    // Groupie RecyclerView
    implementation 'com.xwray:groupie:2.3.0'
    implementation 'com.xwray:groupie-kotlin-android-extensions:2.3.0'
}

/**
 * Gets current git branch name
 */
static String getCurrentGitBranchName() {
    return 'git symbolic-ref --short HEAD'.execute().text.trim()
}

static String getGitSHA() {
    return 'git rev-parse HEAD'.execute().text.trim()
}

/**
 * Apply google services plugin
 */
apply plugin: 'com.google.gms.google-services'